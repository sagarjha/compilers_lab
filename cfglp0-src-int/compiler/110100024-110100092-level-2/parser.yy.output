
Production Rules
(rule precedences determined from %prec or 1st terminal between parentheses):
1: program ->  optional_declaration_list procedure_definition
2: optional_declaration_list ->  <empty>
3: optional_declaration_list ->  variable_declaration_list
4: procedure_definition (NAME) ->  NAME '(' ')' #0001 '{' optional_variable_declaration_list #0002 basic_block_list '}'
5: #0001 ->  <empty>
6: #0002 ->  <empty>
7: optional_variable_declaration_list ->  <empty>
8: optional_variable_declaration_list ->  variable_declaration_list
9: variable_declaration_list ->  variable_declaration
10: variable_declaration_list ->  variable_declaration_list variable_declaration
11: variable_declaration (';') ->  declaration ';'
12: declaration (INTEGER) ->  INTEGER NAME
13: basic_block_list ->  basic_block_list basic_block
14: basic_block_list ->  basic_block
15: basic_block (BBNUM) ->  BBNUM ':' executable_statement_list
16: basic_block (BBNUM) ->  BBNUM ':' executable_statement_list conditional_statement
17: basic_block (BBNUM) ->  BBNUM ':' executable_statement_list goto_statement
18: executable_statement_list ->  assignment_statement_list
19: executable_statement_list (RETURN) ->  assignment_statement_list RETURN ';'
20: assignment_statement_list ->  <empty>
21: assignment_statement_list ->  assignment_statement_list assignment_statement
22: assignment_statement (ASSIGN) ->  variable ASSIGN flp ';'
23: variable (NAME) ->  NAME
24: constant (INTEGER_NUMBER) ->  INTEGER_NUMBER
25: conditional_statement (IF) ->  IF '(' flp ')' GOTO BBNUM ';' ELSE GOTO BBNUM ';'
26: goto_statement (GOTO) ->  GOTO BBNUM ';'
27: modified_variable ->  variable
28: modified_variable ->  constant
29: flp (ASSIGN) ->  flp ASSIGN slp
30: flp ->  slp
31: slp (EQUAL) ->  slp EQUAL tlp
32: slp (NOT_EQUAL) ->  slp NOT_EQUAL tlp
33: slp ->  tlp
34: tlp (GE) ->  tlp GE tlt
35: tlp (GT) ->  tlp GT tlt
36: tlp (LE) ->  tlp LE tlt
37: tlp (LT) ->  tlp LT tlt
38: tlp ->  tlt
39: tlt ->  modified_variable
40: tlt ('(') ->  '(' flp ')'
41: program_$ ->  program


Symbolic Terminal tokens:
       error
       EOF
   257: INTEGER_NUMBER
   258: BBNUM
   259: NAME
   260: RETURN
   261: INTEGER
   262: IF
   263: ELSE
   264: GOTO
   265: ASSIGN
   266: NOT_EQUAL
   267: EQUAL
   268: LT
   269: LE
   270: GT
   271: GE
    40: '('
    41: ')'
   123: '{'
   125: '}'
    59: ';'
    58: ':'


Grammar States: 
State 0:
41: program_$ ->  . program 
  0:   On program to state 1
  1:   On optional_declaration_list to state 2
  2:   On variable_declaration_list to state 3
  3:   On variable_declaration to state 4
  4:   On declaration to state 5
  5:   On INTEGER to state 6
  Reduce by 2: optional_declaration_list ->  . 


State 1:
41: program_$ -> program  . 


State 2:
1: program -> optional_declaration_list  . procedure_definition 
  0:   On procedure_definition to state 7
  1:   On NAME to state 8


State 3:
3: optional_declaration_list -> variable_declaration_list  . 
10: variable_declaration_list -> variable_declaration_list  . variable_declaration 
  0:   On variable_declaration to state 9
  1:   On declaration to state 5
  2:   On INTEGER to state 6
  Reduce by 3: optional_declaration_list -> variable_declaration_list  . 


State 4:
9: variable_declaration_list -> variable_declaration  . 
  Reduce by 9: variable_declaration_list -> variable_declaration  . 


State 5:
11: variable_declaration -> declaration  . ';' 
  0:   On ';' to state 10


State 6:
12: declaration -> INTEGER  . NAME 
  0:   On NAME to state 11


State 7:
1: program -> optional_declaration_list procedure_definition  . 
  Reduce by 1: program -> optional_declaration_list procedure_definition  . 


State 8:
4: procedure_definition -> NAME  . '(' ')' #0001 '{' optional_variable_declaration_list #0002 basic_block_list '}' 
  0:   On '(' to state 12


State 9:
10: variable_declaration_list -> variable_declaration_list variable_declaration  . 
  Reduce by 10: variable_declaration_list -> variable_declaration_list variable_declaration  . 


State 10:
11: variable_declaration -> declaration ';'  . 
  Reduce by 11: variable_declaration -> declaration ';'  . 


State 11:
12: declaration -> INTEGER NAME  . 
  Reduce by 12: declaration -> INTEGER NAME  . 


State 12:
4: procedure_definition -> NAME '('  . ')' #0001 '{' optional_variable_declaration_list #0002 basic_block_list '}' 
  0:   On ')' to state 13


State 13:
4: procedure_definition -> NAME '(' ')'  . #0001 '{' optional_variable_declaration_list #0002 basic_block_list '}' 
  0:   On #0001 to state 14
  Reduce by 5: #0001 ->  . 


State 14:
4: procedure_definition -> NAME '(' ')' #0001  . '{' optional_variable_declaration_list #0002 basic_block_list '}' 
  0:   On '{' to state 15


State 15:
4: procedure_definition -> NAME '(' ')' #0001 '{'  . optional_variable_declaration_list #0002 basic_block_list '}' 
  0:   On optional_variable_declaration_list to state 16
  1:   On variable_declaration_list to state 17
  2:   On variable_declaration to state 4
  3:   On declaration to state 5
  4:   On INTEGER to state 6
  Reduce by 7: optional_variable_declaration_list ->  . 


State 16:
4: procedure_definition -> NAME '(' ')' #0001 '{' optional_variable_declaration_list  . #0002 basic_block_list '}' 
  0:   On #0002 to state 18
  Reduce by 6: #0002 ->  . 


State 17:
8: optional_variable_declaration_list -> variable_declaration_list  . 
10: variable_declaration_list -> variable_declaration_list  . variable_declaration 
  0:   On variable_declaration to state 9
  1:   On declaration to state 5
  2:   On INTEGER to state 6
  Reduce by 8: optional_variable_declaration_list -> variable_declaration_list  . 


State 18:
4: procedure_definition -> NAME '(' ')' #0001 '{' optional_variable_declaration_list #0002  . basic_block_list '}' 
  0:   On basic_block_list to state 19
  1:   On basic_block to state 20
  2:   On BBNUM to state 21


State 19:
4: procedure_definition -> NAME '(' ')' #0001 '{' optional_variable_declaration_list #0002 basic_block_list  . '}' 
13: basic_block_list -> basic_block_list  . basic_block 
  0:   On '}' to state 22
  1:   On basic_block to state 23
  2:   On BBNUM to state 21


State 20:
14: basic_block_list -> basic_block  . 
  Reduce by 14: basic_block_list -> basic_block  . 


State 21:
15: basic_block -> BBNUM  . ':' executable_statement_list 
16: basic_block -> BBNUM  . ':' executable_statement_list conditional_statement 
17: basic_block -> BBNUM  . ':' executable_statement_list goto_statement 
  0:   On ':' to state 24


State 22:
4: procedure_definition -> NAME '(' ')' #0001 '{' optional_variable_declaration_list #0002 basic_block_list '}'  . 
  Reduce by 4: procedure_definition -> NAME '(' ')' #0001 '{' optional_variable_declaration_list #0002 basic_block_list '}'  . 


State 23:
13: basic_block_list -> basic_block_list basic_block  . 
  Reduce by 13: basic_block_list -> basic_block_list basic_block  . 


State 24:
15: basic_block -> BBNUM ':'  . executable_statement_list 
16: basic_block -> BBNUM ':'  . executable_statement_list conditional_statement 
17: basic_block -> BBNUM ':'  . executable_statement_list goto_statement 
  0:   On executable_statement_list to state 25
  1:   On assignment_statement_list to state 26
  Reduce by 20: assignment_statement_list ->  . 


State 25:
15: basic_block -> BBNUM ':' executable_statement_list  . 
16: basic_block -> BBNUM ':' executable_statement_list  . conditional_statement 
17: basic_block -> BBNUM ':' executable_statement_list  . goto_statement 
  0:   On conditional_statement to state 27
  1:   On goto_statement to state 28
  2:   On IF to state 29
  3:   On GOTO to state 30
  Reduce by 15: basic_block -> BBNUM ':' executable_statement_list  . 


State 26:
18: executable_statement_list -> assignment_statement_list  . 
19: executable_statement_list -> assignment_statement_list  . RETURN ';' 
21: assignment_statement_list -> assignment_statement_list  . assignment_statement 
  0:   On RETURN to state 31
  1:   On assignment_statement to state 32
  2:   On variable to state 33
  3:   On NAME to state 34
  Reduce by 18: executable_statement_list -> assignment_statement_list  . 


State 27:
16: basic_block -> BBNUM ':' executable_statement_list conditional_statement  . 
  Reduce by 16: basic_block -> BBNUM ':' executable_statement_list conditional_statement  . 


State 28:
17: basic_block -> BBNUM ':' executable_statement_list goto_statement  . 
  Reduce by 17: basic_block -> BBNUM ':' executable_statement_list goto_statement  . 


State 29:
25: conditional_statement -> IF  . '(' flp ')' GOTO BBNUM ';' ELSE GOTO BBNUM ';' 
  0:   On '(' to state 35


State 30:
26: goto_statement -> GOTO  . BBNUM ';' 
  0:   On BBNUM to state 36


State 31:
19: executable_statement_list -> assignment_statement_list RETURN  . ';' 
  0:   On ';' to state 37


State 32:
21: assignment_statement_list -> assignment_statement_list assignment_statement  . 
  Reduce by 21: assignment_statement_list -> assignment_statement_list assignment_statement  . 


State 33:
22: assignment_statement -> variable  . ASSIGN flp ';' 
  0:   On ASSIGN to state 38


State 34:
23: variable -> NAME  . 
  Reduce by 23: variable -> NAME  . 


State 35:
25: conditional_statement -> IF '('  . flp ')' GOTO BBNUM ';' ELSE GOTO BBNUM ';' 
  0:   On flp to state 39
  1:   On slp to state 40
  2:   On tlp to state 41
  3:   On tlt to state 42
  4:   On modified_variable to state 43
  5:   On '(' to state 44
  6:   On variable to state 45
  7:   On constant to state 46
  8:   On NAME to state 34
  9:   On INTEGER_NUMBER to state 47


State 36:
26: goto_statement -> GOTO BBNUM  . ';' 
  0:   On ';' to state 48


State 37:
19: executable_statement_list -> assignment_statement_list RETURN ';'  . 
  Reduce by 19: executable_statement_list -> assignment_statement_list RETURN ';'  . 


State 38:
22: assignment_statement -> variable ASSIGN  . flp ';' 
  0:   On flp to state 49
  1:   On slp to state 40
  2:   On tlp to state 41
  3:   On tlt to state 42
  4:   On modified_variable to state 43
  5:   On '(' to state 44
  6:   On variable to state 45
  7:   On constant to state 46
  8:   On NAME to state 34
  9:   On INTEGER_NUMBER to state 47


State 39:
25: conditional_statement -> IF '(' flp  . ')' GOTO BBNUM ';' ELSE GOTO BBNUM ';' 
29: flp -> flp  . ASSIGN slp 
  0:   On ')' to state 50
  1:   On ASSIGN to state 51


State 40:
30: flp -> slp  . 
31: slp -> slp  . EQUAL tlp 
32: slp -> slp  . NOT_EQUAL tlp 
  0:   On EQUAL to state 52
  1:   On NOT_EQUAL to state 53
  Reduce by 30: flp -> slp  . 


State 41:
33: slp -> tlp  . 
34: tlp -> tlp  . GE tlt 
35: tlp -> tlp  . GT tlt 
36: tlp -> tlp  . LE tlt 
37: tlp -> tlp  . LT tlt 
  0:   On GE to state 54
  1:   On GT to state 55
  2:   On LE to state 56
  3:   On LT to state 57
  Reduce by 33: slp -> tlp  . 


State 42:
38: tlp -> tlt  . 
  Reduce by 38: tlp -> tlt  . 


State 43:
39: tlt -> modified_variable  . 
  Reduce by 39: tlt -> modified_variable  . 


State 44:
40: tlt -> '('  . flp ')' 
  0:   On flp to state 58
  1:   On slp to state 40
  2:   On tlp to state 41
  3:   On tlt to state 42
  4:   On modified_variable to state 43
  5:   On '(' to state 44
  6:   On variable to state 45
  7:   On constant to state 46
  8:   On NAME to state 34
  9:   On INTEGER_NUMBER to state 47


State 45:
27: modified_variable -> variable  . 
  Reduce by 27: modified_variable -> variable  . 


State 46:
28: modified_variable -> constant  . 
  Reduce by 28: modified_variable -> constant  . 


State 47:
24: constant -> INTEGER_NUMBER  . 
  Reduce by 24: constant -> INTEGER_NUMBER  . 


State 48:
26: goto_statement -> GOTO BBNUM ';'  . 
  Reduce by 26: goto_statement -> GOTO BBNUM ';'  . 


State 49:
22: assignment_statement -> variable ASSIGN flp  . ';' 
29: flp -> flp  . ASSIGN slp 
  0:   On ';' to state 59
  1:   On ASSIGN to state 51


State 50:
25: conditional_statement -> IF '(' flp ')'  . GOTO BBNUM ';' ELSE GOTO BBNUM ';' 
  0:   On GOTO to state 60


State 51:
29: flp -> flp ASSIGN  . slp 
  0:   On slp to state 61
  1:   On tlp to state 41
  2:   On tlt to state 42
  3:   On modified_variable to state 43
  4:   On '(' to state 44
  5:   On variable to state 45
  6:   On constant to state 46
  7:   On NAME to state 34
  8:   On INTEGER_NUMBER to state 47


State 52:
31: slp -> slp EQUAL  . tlp 
  0:   On tlp to state 62
  1:   On tlt to state 42
  2:   On modified_variable to state 43
  3:   On '(' to state 44
  4:   On variable to state 45
  5:   On constant to state 46
  6:   On NAME to state 34
  7:   On INTEGER_NUMBER to state 47


State 53:
32: slp -> slp NOT_EQUAL  . tlp 
  0:   On tlp to state 63
  1:   On tlt to state 42
  2:   On modified_variable to state 43
  3:   On '(' to state 44
  4:   On variable to state 45
  5:   On constant to state 46
  6:   On NAME to state 34
  7:   On INTEGER_NUMBER to state 47


State 54:
34: tlp -> tlp GE  . tlt 
  0:   On tlt to state 64
  1:   On modified_variable to state 43
  2:   On '(' to state 44
  3:   On variable to state 45
  4:   On constant to state 46
  5:   On NAME to state 34
  6:   On INTEGER_NUMBER to state 47


State 55:
35: tlp -> tlp GT  . tlt 
  0:   On tlt to state 65
  1:   On modified_variable to state 43
  2:   On '(' to state 44
  3:   On variable to state 45
  4:   On constant to state 46
  5:   On NAME to state 34
  6:   On INTEGER_NUMBER to state 47


State 56:
36: tlp -> tlp LE  . tlt 
  0:   On tlt to state 66
  1:   On modified_variable to state 43
  2:   On '(' to state 44
  3:   On variable to state 45
  4:   On constant to state 46
  5:   On NAME to state 34
  6:   On INTEGER_NUMBER to state 47


State 57:
37: tlp -> tlp LT  . tlt 
  0:   On tlt to state 67
  1:   On modified_variable to state 43
  2:   On '(' to state 44
  3:   On variable to state 45
  4:   On constant to state 46
  5:   On NAME to state 34
  6:   On INTEGER_NUMBER to state 47


State 58:
40: tlt -> '(' flp  . ')' 
29: flp -> flp  . ASSIGN slp 
  0:   On ')' to state 68
  1:   On ASSIGN to state 51


State 59:
22: assignment_statement -> variable ASSIGN flp ';'  . 
  Reduce by 22: assignment_statement -> variable ASSIGN flp ';'  . 


State 60:
25: conditional_statement -> IF '(' flp ')' GOTO  . BBNUM ';' ELSE GOTO BBNUM ';' 
  0:   On BBNUM to state 69


State 61:
29: flp -> flp ASSIGN slp  . 
31: slp -> slp  . EQUAL tlp 
32: slp -> slp  . NOT_EQUAL tlp 
  0:   On EQUAL to state 52
  1:   On NOT_EQUAL to state 53
  Reduce by 29: flp -> flp ASSIGN slp  . 


State 62:
31: slp -> slp EQUAL tlp  . 
34: tlp -> tlp  . GE tlt 
35: tlp -> tlp  . GT tlt 
36: tlp -> tlp  . LE tlt 
37: tlp -> tlp  . LT tlt 
  0:   On GE to state 54
  1:   On GT to state 55
  2:   On LE to state 56
  3:   On LT to state 57
  Reduce by 31: slp -> slp EQUAL tlp  . 


State 63:
32: slp -> slp NOT_EQUAL tlp  . 
34: tlp -> tlp  . GE tlt 
35: tlp -> tlp  . GT tlt 
36: tlp -> tlp  . LE tlt 
37: tlp -> tlp  . LT tlt 
  0:   On GE to state 54
  1:   On GT to state 55
  2:   On LE to state 56
  3:   On LT to state 57
  Reduce by 32: slp -> slp NOT_EQUAL tlp  . 


State 64:
34: tlp -> tlp GE tlt  . 
  Reduce by 34: tlp -> tlp GE tlt  . 


State 65:
35: tlp -> tlp GT tlt  . 
  Reduce by 35: tlp -> tlp GT tlt  . 


State 66:
36: tlp -> tlp LE tlt  . 
  Reduce by 36: tlp -> tlp LE tlt  . 


State 67:
37: tlp -> tlp LT tlt  . 
  Reduce by 37: tlp -> tlp LT tlt  . 


State 68:
40: tlt -> '(' flp ')'  . 
  Reduce by 40: tlt -> '(' flp ')'  . 


State 69:
25: conditional_statement -> IF '(' flp ')' GOTO BBNUM  . ';' ELSE GOTO BBNUM ';' 
  0:   On ';' to state 70


State 70:
25: conditional_statement -> IF '(' flp ')' GOTO BBNUM ';'  . ELSE GOTO BBNUM ';' 
  0:   On ELSE to state 71


State 71:
25: conditional_statement -> IF '(' flp ')' GOTO BBNUM ';' ELSE  . GOTO BBNUM ';' 
  0:   On GOTO to state 72


State 72:
25: conditional_statement -> IF '(' flp ')' GOTO BBNUM ';' ELSE GOTO  . BBNUM ';' 
  0:   On BBNUM to state 73


State 73:
25: conditional_statement -> IF '(' flp ')' GOTO BBNUM ';' ELSE GOTO BBNUM  . ';' 
  0:   On ';' to state 74


State 74:
25: conditional_statement -> IF '(' flp ')' GOTO BBNUM ';' ELSE GOTO BBNUM ';'  . 
  Reduce by 25: conditional_statement -> IF '(' flp ')' GOTO BBNUM ';' ELSE GOTO BBNUM ';'  . 



