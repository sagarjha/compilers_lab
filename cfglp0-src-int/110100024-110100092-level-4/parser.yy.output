
Production Rules
(rule precedences determined from %prec or 1st terminal between parentheses):
1: program ->  declaration_statement_list function_declaration_list #0001 procedure_list
2: #0001 ->  <empty>
3: program ->  function_declaration_list procedure_list
4: function_declaration_list ->  function_declaration_list function_declaration
5: function_declaration_list ->  function_declaration
6: function_declaration (NAME) ->  type NAME '(' argument_list ')' ';'
7: function_declaration (VOID) ->  VOID NAME '(' argument_list ')' ';'
8: function_declaration (NAME) ->  type NAME '(' ')' ';'
9: function_declaration (VOID) ->  VOID NAME '(' ')' ';'
10: argument_list (',') ->  argument_list ',' argument
11: argument_list ->  argument
12: argument (NAME) ->  type NAME
13: type (INTEGER) ->  INTEGER
14: type (FLOAT) ->  FLOAT
15: type (DOUBLE) ->  DOUBLE
16: procedure_list ->  procedure
17: procedure_list ->  procedure_list procedure
18: procedure (NAME) ->  NAME '(' argument_list ')' #0002 procedure_body
19: #0002 ->  <empty>
20: procedure (NAME) ->  NAME '(' ')' #0003 procedure_body
21: #0003 ->  <empty>
22: procedure_body ('{') ->  '{' declaration_statement_list #0004 basic_block_list '}'
23: #0004 ->  <empty>
24: procedure_body ('{') ->  '{' basic_block_list '}'
25: declaration_statement_list ->  declaration_statement
26: declaration_statement_list ->  declaration_statement_list declaration_statement
27: declaration_statement (NAME) ->  type NAME ';'
28: basic_block_list ->  basic_block_list basic_block
29: basic_block_list ->  basic_block
30: basic_block (BASIC_BLOCK) ->  BASIC_BLOCK ':' executable_statement_list
31: basic_block (BASIC_BLOCK) ->  BASIC_BLOCK ':' executable_statement_list conditional_statement
32: basic_block (BASIC_BLOCK) ->  BASIC_BLOCK ':' executable_statement_list goto_statement
33: executable_statement_list ->  statement_list
34: executable_statement_list (';') ->  statement_list return_statement ';'
35: return_statement (RETURN) ->  RETURN
36: return_statement (RETURN) ->  RETURN exp_assign_op
37: statement_list ->  <empty>
38: statement_list ->  statement_list assignment_statement
39: statement_list (';') ->  statement_list function_call_statement ';'
40: assignment_statement (ASSIGN_OP) ->  variable ASSIGN_OP exp_assign_op ';'
41: function_call_statement (NAME) ->  NAME '(' exp_assign_op_list ')'
42: function_call_statement (NAME) ->  NAME '(' ')'
43: exp_assign_op_list (',') ->  exp_assign_op_list ',' exp_assign_op
44: exp_assign_op_list ->  exp_assign_op
45: variable (NAME) ->  NAME
46: variable ('(') ->  '(' type ')' NAME
47: constant (INTEGER_NUMBER) ->  INTEGER_NUMBER
48: constant (FLOATING_POINT_NUMBER) ->  FLOATING_POINT_NUMBER
49: conditional_statement (IF) ->  IF '(' exp_assign_op ')' GOTO BASIC_BLOCK ';' ELSE GOTO BASIC_BLOCK ';'
50: goto_statement (GOTO) ->  GOTO BASIC_BLOCK ';'
51: modified_variable ->  variable
52: modified_variable ->  constant
53: exp_assign_op (ASSIGN_OP) ->  exp_assign_op ASSIGN_OP exp_eq_ne
54: exp_assign_op ->  exp_eq_ne
55: exp_eq_ne (EQUAL) ->  exp_eq_ne EQUAL exp_le_lt_ge_gt
56: exp_eq_ne (NOT_EQUAL) ->  exp_eq_ne NOT_EQUAL exp_le_lt_ge_gt
57: exp_eq_ne ->  exp_le_lt_ge_gt
58: exp_le_lt_ge_gt (GE) ->  exp_le_lt_ge_gt GE exp_add_sub
59: exp_le_lt_ge_gt (GT) ->  exp_le_lt_ge_gt GT exp_add_sub
60: exp_le_lt_ge_gt (LE) ->  exp_le_lt_ge_gt LE exp_add_sub
61: exp_le_lt_ge_gt (LT) ->  exp_le_lt_ge_gt LT exp_add_sub
62: exp_le_lt_ge_gt ->  exp_add_sub
63: exp_add_sub ('+') ->  exp_add_sub '+' exp_mul_div
64: exp_add_sub ('-') ->  exp_add_sub '-' exp_mul_div
65: exp_add_sub ->  exp_mul_div
66: exp_mul_div ('*') ->  exp_mul_div '*' singleton
67: exp_mul_div ('/') ->  exp_mul_div '/' singleton
68: exp_mul_div ->  singleton
69: singleton ->  function_call_statement
70: singleton ('(') ->  '(' type ')' function_call_statement
71: singleton ->  modified_variable
72: singleton ('-') ->  '-' modified_variable
73: singleton ('(') ->  '(' exp_assign_op ')'
74: singleton ('-') ->  '-' '(' exp_assign_op ')'
75: singleton ('(') ->  '(' type ')' '(' exp_assign_op ')'
76: program_$ ->  program


Symbolic Terminal tokens:
       error
       EOF
   257: INTEGER_NUMBER
   258: BASIC_BLOCK
   259: FLOATING_POINT_NUMBER
   260: NAME
   261: RETURN
   262: INTEGER
   263: FLOAT
   264: DOUBLE
   265: VOID
   266: IF
   267: ELSE
   268: GOTO
   269: ASSIGN_OP
   270: NOT_EQUAL
   271: EQUAL
   272: LT
   273: LE
   274: GT
   275: GE
    40: '('
    41: ')'
    59: ';'
    44: ','
   123: '{'
   125: '}'
    58: ':'
    43: '+'
    45: '-'
    42: '*'
    47: '/'


Grammar States: 
State 0:
76: program_$ ->  . program 
  0:   On program to state 1
  1:   On declaration_statement_list to state 2
  2:   On function_declaration_list to state 3
  3:   On declaration_statement to state 4
  4:   On function_declaration to state 5
  5:   On type to state 6
  6:   On VOID to state 7
  7:   On INTEGER to state 8
  8:   On FLOAT to state 9
  9:   On DOUBLE to state 10


State 1:
76: program_$ -> program  . 


State 2:
1: program -> declaration_statement_list  . function_declaration_list #0001 procedure_list 
26: declaration_statement_list -> declaration_statement_list  . declaration_statement 
  0:   On function_declaration_list to state 11
  1:   On declaration_statement to state 12
  2:   On function_declaration to state 5
  3:   On type to state 6
  4:   On VOID to state 7
  5:   On INTEGER to state 8
  6:   On FLOAT to state 9
  7:   On DOUBLE to state 10


State 3:
3: program -> function_declaration_list  . procedure_list 
4: function_declaration_list -> function_declaration_list  . function_declaration 
  0:   On procedure_list to state 13
  1:   On function_declaration to state 14
  2:   On procedure to state 15
  3:   On type to state 16
  4:   On VOID to state 7
  5:   On NAME to state 17
  6:   On INTEGER to state 8
  7:   On FLOAT to state 9
  8:   On DOUBLE to state 10


State 4:
25: declaration_statement_list -> declaration_statement  . 
  Reduce by 25: declaration_statement_list -> declaration_statement  . 


State 5:
5: function_declaration_list -> function_declaration  . 
  Reduce by 5: function_declaration_list -> function_declaration  . 


State 6:
27: declaration_statement -> type  . NAME ';' 
6: function_declaration -> type  . NAME '(' argument_list ')' ';' 
8: function_declaration -> type  . NAME '(' ')' ';' 
  0:   On NAME to state 18


State 7:
7: function_declaration -> VOID  . NAME '(' argument_list ')' ';' 
9: function_declaration -> VOID  . NAME '(' ')' ';' 
  0:   On NAME to state 19


State 8:
13: type -> INTEGER  . 
  Reduce by 13: type -> INTEGER  . 


State 9:
14: type -> FLOAT  . 
  Reduce by 14: type -> FLOAT  . 


State 10:
15: type -> DOUBLE  . 
  Reduce by 15: type -> DOUBLE  . 


State 11:
1: program -> declaration_statement_list function_declaration_list  . #0001 procedure_list 
4: function_declaration_list -> function_declaration_list  . function_declaration 
  0:   On #0001 to state 20
  1:   On function_declaration to state 14
  2:   On type to state 16
  3:   On VOID to state 7
  4:   On INTEGER to state 8
  5:   On FLOAT to state 9
  6:   On DOUBLE to state 10
  Reduce by 2: #0001 ->  . 


State 12:
26: declaration_statement_list -> declaration_statement_list declaration_statement  . 
  Reduce by 26: declaration_statement_list -> declaration_statement_list declaration_statement  . 


State 13:
3: program -> function_declaration_list procedure_list  . 
17: procedure_list -> procedure_list  . procedure 
  0:   On procedure to state 21
  1:   On NAME to state 17
  Reduce by 3: program -> function_declaration_list procedure_list  . 


State 14:
4: function_declaration_list -> function_declaration_list function_declaration  . 
  Reduce by 4: function_declaration_list -> function_declaration_list function_declaration  . 


State 15:
16: procedure_list -> procedure  . 
  Reduce by 16: procedure_list -> procedure  . 


State 16:
6: function_declaration -> type  . NAME '(' argument_list ')' ';' 
8: function_declaration -> type  . NAME '(' ')' ';' 
  0:   On NAME to state 22


State 17:
18: procedure -> NAME  . '(' argument_list ')' #0002 procedure_body 
20: procedure -> NAME  . '(' ')' #0003 procedure_body 
  0:   On '(' to state 23


State 18:
27: declaration_statement -> type NAME  . ';' 
6: function_declaration -> type NAME  . '(' argument_list ')' ';' 
8: function_declaration -> type NAME  . '(' ')' ';' 
  0:   On ';' to state 24
  1:   On '(' to state 25


State 19:
7: function_declaration -> VOID NAME  . '(' argument_list ')' ';' 
9: function_declaration -> VOID NAME  . '(' ')' ';' 
  0:   On '(' to state 26


State 20:
1: program -> declaration_statement_list function_declaration_list #0001  . procedure_list 
  0:   On procedure_list to state 27
  1:   On procedure to state 15
  2:   On NAME to state 17


State 21:
17: procedure_list -> procedure_list procedure  . 
  Reduce by 17: procedure_list -> procedure_list procedure  . 


State 22:
6: function_declaration -> type NAME  . '(' argument_list ')' ';' 
8: function_declaration -> type NAME  . '(' ')' ';' 
  0:   On '(' to state 25


State 23:
18: procedure -> NAME '('  . argument_list ')' #0002 procedure_body 
20: procedure -> NAME '('  . ')' #0003 procedure_body 
  0:   On argument_list to state 28
  1:   On ')' to state 29
  2:   On argument to state 30
  3:   On type to state 31
  4:   On INTEGER to state 8
  5:   On FLOAT to state 9
  6:   On DOUBLE to state 10


State 24:
27: declaration_statement -> type NAME ';'  . 
  Reduce by 27: declaration_statement -> type NAME ';'  . 


State 25:
6: function_declaration -> type NAME '('  . argument_list ')' ';' 
8: function_declaration -> type NAME '('  . ')' ';' 
  0:   On argument_list to state 32
  1:   On ')' to state 33
  2:   On argument to state 30
  3:   On type to state 31
  4:   On INTEGER to state 8
  5:   On FLOAT to state 9
  6:   On DOUBLE to state 10


State 26:
7: function_declaration -> VOID NAME '('  . argument_list ')' ';' 
9: function_declaration -> VOID NAME '('  . ')' ';' 
  0:   On argument_list to state 34
  1:   On ')' to state 35
  2:   On argument to state 30
  3:   On type to state 31
  4:   On INTEGER to state 8
  5:   On FLOAT to state 9
  6:   On DOUBLE to state 10


State 27:
1: program -> declaration_statement_list function_declaration_list #0001 procedure_list  . 
17: procedure_list -> procedure_list  . procedure 
  0:   On procedure to state 21
  1:   On NAME to state 17
  Reduce by 1: program -> declaration_statement_list function_declaration_list #0001 procedure_list  . 


State 28:
18: procedure -> NAME '(' argument_list  . ')' #0002 procedure_body 
10: argument_list -> argument_list  . ',' argument 
  0:   On ')' to state 36
  1:   On ',' to state 37


State 29:
20: procedure -> NAME '(' ')'  . #0003 procedure_body 
  0:   On #0003 to state 38
  Reduce by 21: #0003 ->  . 


State 30:
11: argument_list -> argument  . 
  Reduce by 11: argument_list -> argument  . 


State 31:
12: argument -> type  . NAME 
  0:   On NAME to state 39


State 32:
6: function_declaration -> type NAME '(' argument_list  . ')' ';' 
10: argument_list -> argument_list  . ',' argument 
  0:   On ')' to state 40
  1:   On ',' to state 37


State 33:
8: function_declaration -> type NAME '(' ')'  . ';' 
  0:   On ';' to state 41


State 34:
7: function_declaration -> VOID NAME '(' argument_list  . ')' ';' 
10: argument_list -> argument_list  . ',' argument 
  0:   On ')' to state 42
  1:   On ',' to state 37


State 35:
9: function_declaration -> VOID NAME '(' ')'  . ';' 
  0:   On ';' to state 43


State 36:
18: procedure -> NAME '(' argument_list ')'  . #0002 procedure_body 
  0:   On #0002 to state 44
  Reduce by 19: #0002 ->  . 


State 37:
10: argument_list -> argument_list ','  . argument 
  0:   On argument to state 45
  1:   On type to state 31
  2:   On INTEGER to state 8
  3:   On FLOAT to state 9
  4:   On DOUBLE to state 10


State 38:
20: procedure -> NAME '(' ')' #0003  . procedure_body 
  0:   On procedure_body to state 46
  1:   On '{' to state 47


State 39:
12: argument -> type NAME  . 
  Reduce by 12: argument -> type NAME  . 


State 40:
6: function_declaration -> type NAME '(' argument_list ')'  . ';' 
  0:   On ';' to state 48


State 41:
8: function_declaration -> type NAME '(' ')' ';'  . 
  Reduce by 8: function_declaration -> type NAME '(' ')' ';'  . 


State 42:
7: function_declaration -> VOID NAME '(' argument_list ')'  . ';' 
  0:   On ';' to state 49


State 43:
9: function_declaration -> VOID NAME '(' ')' ';'  . 
  Reduce by 9: function_declaration -> VOID NAME '(' ')' ';'  . 


State 44:
18: procedure -> NAME '(' argument_list ')' #0002  . procedure_body 
  0:   On procedure_body to state 50
  1:   On '{' to state 47


State 45:
10: argument_list -> argument_list ',' argument  . 
  Reduce by 10: argument_list -> argument_list ',' argument  . 


State 46:
20: procedure -> NAME '(' ')' #0003 procedure_body  . 
  Reduce by 20: procedure -> NAME '(' ')' #0003 procedure_body  . 


State 47:
22: procedure_body -> '{'  . declaration_statement_list #0004 basic_block_list '}' 
24: procedure_body -> '{'  . basic_block_list '}' 
  0:   On declaration_statement_list to state 51
  1:   On basic_block_list to state 52
  2:   On declaration_statement to state 4
  3:   On basic_block to state 53
  4:   On type to state 54
  5:   On BASIC_BLOCK to state 55
  6:   On INTEGER to state 8
  7:   On FLOAT to state 9
  8:   On DOUBLE to state 10


State 48:
6: function_declaration -> type NAME '(' argument_list ')' ';'  . 
  Reduce by 6: function_declaration -> type NAME '(' argument_list ')' ';'  . 


State 49:
7: function_declaration -> VOID NAME '(' argument_list ')' ';'  . 
  Reduce by 7: function_declaration -> VOID NAME '(' argument_list ')' ';'  . 


State 50:
18: procedure -> NAME '(' argument_list ')' #0002 procedure_body  . 
  Reduce by 18: procedure -> NAME '(' argument_list ')' #0002 procedure_body  . 


State 51:
22: procedure_body -> '{' declaration_statement_list  . #0004 basic_block_list '}' 
26: declaration_statement_list -> declaration_statement_list  . declaration_statement 
  0:   On #0004 to state 56
  1:   On declaration_statement to state 12
  2:   On type to state 54
  3:   On INTEGER to state 8
  4:   On FLOAT to state 9
  5:   On DOUBLE to state 10
  Reduce by 23: #0004 ->  . 


State 52:
24: procedure_body -> '{' basic_block_list  . '}' 
28: basic_block_list -> basic_block_list  . basic_block 
  0:   On '}' to state 57
  1:   On basic_block to state 58
  2:   On BASIC_BLOCK to state 55


State 53:
29: basic_block_list -> basic_block  . 
  Reduce by 29: basic_block_list -> basic_block  . 


State 54:
27: declaration_statement -> type  . NAME ';' 
  0:   On NAME to state 59


State 55:
30: basic_block -> BASIC_BLOCK  . ':' executable_statement_list 
31: basic_block -> BASIC_BLOCK  . ':' executable_statement_list conditional_statement 
32: basic_block -> BASIC_BLOCK  . ':' executable_statement_list goto_statement 
  0:   On ':' to state 60


State 56:
22: procedure_body -> '{' declaration_statement_list #0004  . basic_block_list '}' 
  0:   On basic_block_list to state 61
  1:   On basic_block to state 53
  2:   On BASIC_BLOCK to state 55


State 57:
24: procedure_body -> '{' basic_block_list '}'  . 
  Reduce by 24: procedure_body -> '{' basic_block_list '}'  . 


State 58:
28: basic_block_list -> basic_block_list basic_block  . 
  Reduce by 28: basic_block_list -> basic_block_list basic_block  . 


State 59:
27: declaration_statement -> type NAME  . ';' 
  0:   On ';' to state 24


State 60:
30: basic_block -> BASIC_BLOCK ':'  . executable_statement_list 
31: basic_block -> BASIC_BLOCK ':'  . executable_statement_list conditional_statement 
32: basic_block -> BASIC_BLOCK ':'  . executable_statement_list goto_statement 
  0:   On executable_statement_list to state 62
  1:   On statement_list to state 63
  Reduce by 37: statement_list ->  . 


State 61:
22: procedure_body -> '{' declaration_statement_list #0004 basic_block_list  . '}' 
28: basic_block_list -> basic_block_list  . basic_block 
  0:   On '}' to state 64
  1:   On basic_block to state 58
  2:   On BASIC_BLOCK to state 55


State 62:
30: basic_block -> BASIC_BLOCK ':' executable_statement_list  . 
31: basic_block -> BASIC_BLOCK ':' executable_statement_list  . conditional_statement 
32: basic_block -> BASIC_BLOCK ':' executable_statement_list  . goto_statement 
  0:   On conditional_statement to state 65
  1:   On goto_statement to state 66
  2:   On IF to state 67
  3:   On GOTO to state 68
  Reduce by 30: basic_block -> BASIC_BLOCK ':' executable_statement_list  . 


State 63:
33: executable_statement_list -> statement_list  . 
34: executable_statement_list -> statement_list  . return_statement ';' 
38: statement_list -> statement_list  . assignment_statement 
39: statement_list -> statement_list  . function_call_statement ';' 
  0:   On return_statement to state 69
  1:   On assignment_statement to state 70
  2:   On function_call_statement to state 71
  3:   On RETURN to state 72
  4:   On variable to state 73
  5:   On NAME to state 74
  6:   On '(' to state 75
  Reduce by 33: executable_statement_list -> statement_list  . 


State 64:
22: procedure_body -> '{' declaration_statement_list #0004 basic_block_list '}'  . 
  Reduce by 22: procedure_body -> '{' declaration_statement_list #0004 basic_block_list '}'  . 


State 65:
31: basic_block -> BASIC_BLOCK ':' executable_statement_list conditional_statement  . 
  Reduce by 31: basic_block -> BASIC_BLOCK ':' executable_statement_list conditional_statement  . 


State 66:
32: basic_block -> BASIC_BLOCK ':' executable_statement_list goto_statement  . 
  Reduce by 32: basic_block -> BASIC_BLOCK ':' executable_statement_list goto_statement  . 


State 67:
49: conditional_statement -> IF  . '(' exp_assign_op ')' GOTO BASIC_BLOCK ';' ELSE GOTO BASIC_BLOCK ';' 
  0:   On '(' to state 76


State 68:
50: goto_statement -> GOTO  . BASIC_BLOCK ';' 
  0:   On BASIC_BLOCK to state 77


State 69:
34: executable_statement_list -> statement_list return_statement  . ';' 
  0:   On ';' to state 78


State 70:
38: statement_list -> statement_list assignment_statement  . 
  Reduce by 38: statement_list -> statement_list assignment_statement  . 


State 71:
39: statement_list -> statement_list function_call_statement  . ';' 
  0:   On ';' to state 79


State 72:
35: return_statement -> RETURN  . 
36: return_statement -> RETURN  . exp_assign_op 
  0:   On exp_assign_op to state 80
  1:   On exp_eq_ne to state 81
  2:   On exp_le_lt_ge_gt to state 82
  3:   On exp_add_sub to state 83
  4:   On exp_mul_div to state 84
  5:   On singleton to state 85
  6:   On function_call_statement to state 86
  7:   On '(' to state 87
  8:   On modified_variable to state 88
  9:   On '-' to state 89
  10:   On NAME to state 74
  11:   On variable to state 90
  12:   On constant to state 91
  13:   On INTEGER_NUMBER to state 92
  14:   On FLOATING_POINT_NUMBER to state 93
  Reduce by 35: return_statement -> RETURN  . 


State 73:
40: assignment_statement -> variable  . ASSIGN_OP exp_assign_op ';' 
  0:   On ASSIGN_OP to state 94


State 74:
41: function_call_statement -> NAME  . '(' exp_assign_op_list ')' 
42: function_call_statement -> NAME  . '(' ')' 
45: variable -> NAME  . 
  0:   On '(' to state 95
  Reduce by 45: variable -> NAME  . 


State 75:
46: variable -> '('  . type ')' NAME 
  0:   On type to state 96
  1:   On INTEGER to state 8
  2:   On FLOAT to state 9
  3:   On DOUBLE to state 10


State 76:
49: conditional_statement -> IF '('  . exp_assign_op ')' GOTO BASIC_BLOCK ';' ELSE GOTO BASIC_BLOCK ';' 
  0:   On exp_assign_op to state 97
  1:   On exp_eq_ne to state 81
  2:   On exp_le_lt_ge_gt to state 82
  3:   On exp_add_sub to state 83
  4:   On exp_mul_div to state 84
  5:   On singleton to state 85
  6:   On function_call_statement to state 86
  7:   On '(' to state 87
  8:   On modified_variable to state 88
  9:   On '-' to state 89
  10:   On NAME to state 74
  11:   On variable to state 90
  12:   On constant to state 91
  13:   On INTEGER_NUMBER to state 92
  14:   On FLOATING_POINT_NUMBER to state 93


State 77:
50: goto_statement -> GOTO BASIC_BLOCK  . ';' 
  0:   On ';' to state 98


State 78:
34: executable_statement_list -> statement_list return_statement ';'  . 
  Reduce by 34: executable_statement_list -> statement_list return_statement ';'  . 


State 79:
39: statement_list -> statement_list function_call_statement ';'  . 
  Reduce by 39: statement_list -> statement_list function_call_statement ';'  . 


State 80:
36: return_statement -> RETURN exp_assign_op  . 
53: exp_assign_op -> exp_assign_op  . ASSIGN_OP exp_eq_ne 
  0:   On ASSIGN_OP to state 99
  Reduce by 36: return_statement -> RETURN exp_assign_op  . 


State 81:
54: exp_assign_op -> exp_eq_ne  . 
55: exp_eq_ne -> exp_eq_ne  . EQUAL exp_le_lt_ge_gt 
56: exp_eq_ne -> exp_eq_ne  . NOT_EQUAL exp_le_lt_ge_gt 
  0:   On EQUAL to state 100
  1:   On NOT_EQUAL to state 101
  Reduce by 54: exp_assign_op -> exp_eq_ne  . 


State 82:
57: exp_eq_ne -> exp_le_lt_ge_gt  . 
58: exp_le_lt_ge_gt -> exp_le_lt_ge_gt  . GE exp_add_sub 
59: exp_le_lt_ge_gt -> exp_le_lt_ge_gt  . GT exp_add_sub 
60: exp_le_lt_ge_gt -> exp_le_lt_ge_gt  . LE exp_add_sub 
61: exp_le_lt_ge_gt -> exp_le_lt_ge_gt  . LT exp_add_sub 
  0:   On GE to state 102
  1:   On GT to state 103
  2:   On LE to state 104
  3:   On LT to state 105
  Reduce by 57: exp_eq_ne -> exp_le_lt_ge_gt  . 


State 83:
62: exp_le_lt_ge_gt -> exp_add_sub  . 
63: exp_add_sub -> exp_add_sub  . '+' exp_mul_div 
64: exp_add_sub -> exp_add_sub  . '-' exp_mul_div 
  0:   On '+' to state 106
  1:   On '-' to state 107
  Reduce by 62: exp_le_lt_ge_gt -> exp_add_sub  . 


State 84:
65: exp_add_sub -> exp_mul_div  . 
66: exp_mul_div -> exp_mul_div  . '*' singleton 
67: exp_mul_div -> exp_mul_div  . '/' singleton 
  0:   On '*' to state 108
  1:   On '/' to state 109
  Reduce by 65: exp_add_sub -> exp_mul_div  . 


State 85:
68: exp_mul_div -> singleton  . 
  Reduce by 68: exp_mul_div -> singleton  . 


State 86:
69: singleton -> function_call_statement  . 
  Reduce by 69: singleton -> function_call_statement  . 


State 87:
70: singleton -> '('  . type ')' function_call_statement 
73: singleton -> '('  . exp_assign_op ')' 
75: singleton -> '('  . type ')' '(' exp_assign_op ')' 
46: variable -> '('  . type ')' NAME 
  0:   On type to state 110
  1:   On exp_assign_op to state 111
  2:   On INTEGER to state 8
  3:   On FLOAT to state 9
  4:   On DOUBLE to state 10
  5:   On exp_eq_ne to state 81
  6:   On exp_le_lt_ge_gt to state 82
  7:   On exp_add_sub to state 83
  8:   On exp_mul_div to state 84
  9:   On singleton to state 85
  10:   On function_call_statement to state 86
  11:   On '(' to state 87
  12:   On modified_variable to state 88
  13:   On '-' to state 89
  14:   On NAME to state 74
  15:   On variable to state 90
  16:   On constant to state 91
  17:   On INTEGER_NUMBER to state 92
  18:   On FLOATING_POINT_NUMBER to state 93


State 88:
71: singleton -> modified_variable  . 
  Reduce by 71: singleton -> modified_variable  . 


State 89:
72: singleton -> '-'  . modified_variable 
74: singleton -> '-'  . '(' exp_assign_op ')' 
  0:   On modified_variable to state 112
  1:   On '(' to state 113
  2:   On variable to state 90
  3:   On constant to state 91
  4:   On NAME to state 114
  5:   On INTEGER_NUMBER to state 92
  6:   On FLOATING_POINT_NUMBER to state 93


State 90:
51: modified_variable -> variable  . 
  Reduce by 51: modified_variable -> variable  . 


State 91:
52: modified_variable -> constant  . 
  Reduce by 52: modified_variable -> constant  . 


State 92:
47: constant -> INTEGER_NUMBER  . 
  Reduce by 47: constant -> INTEGER_NUMBER  . 


State 93:
48: constant -> FLOATING_POINT_NUMBER  . 
  Reduce by 48: constant -> FLOATING_POINT_NUMBER  . 


State 94:
40: assignment_statement -> variable ASSIGN_OP  . exp_assign_op ';' 
  0:   On exp_assign_op to state 115
  1:   On exp_eq_ne to state 81
  2:   On exp_le_lt_ge_gt to state 82
  3:   On exp_add_sub to state 83
  4:   On exp_mul_div to state 84
  5:   On singleton to state 85
  6:   On function_call_statement to state 86
  7:   On '(' to state 87
  8:   On modified_variable to state 88
  9:   On '-' to state 89
  10:   On NAME to state 74
  11:   On variable to state 90
  12:   On constant to state 91
  13:   On INTEGER_NUMBER to state 92
  14:   On FLOATING_POINT_NUMBER to state 93


State 95:
41: function_call_statement -> NAME '('  . exp_assign_op_list ')' 
42: function_call_statement -> NAME '('  . ')' 
  0:   On exp_assign_op_list to state 116
  1:   On ')' to state 117
  2:   On exp_assign_op to state 118
  3:   On exp_eq_ne to state 81
  4:   On exp_le_lt_ge_gt to state 82
  5:   On exp_add_sub to state 83
  6:   On exp_mul_div to state 84
  7:   On singleton to state 85
  8:   On function_call_statement to state 86
  9:   On '(' to state 87
  10:   On modified_variable to state 88
  11:   On '-' to state 89
  12:   On NAME to state 74
  13:   On variable to state 90
  14:   On constant to state 91
  15:   On INTEGER_NUMBER to state 92
  16:   On FLOATING_POINT_NUMBER to state 93


State 96:
46: variable -> '(' type  . ')' NAME 
  0:   On ')' to state 119


State 97:
49: conditional_statement -> IF '(' exp_assign_op  . ')' GOTO BASIC_BLOCK ';' ELSE GOTO BASIC_BLOCK ';' 
53: exp_assign_op -> exp_assign_op  . ASSIGN_OP exp_eq_ne 
  0:   On ')' to state 120
  1:   On ASSIGN_OP to state 99


State 98:
50: goto_statement -> GOTO BASIC_BLOCK ';'  . 
  Reduce by 50: goto_statement -> GOTO BASIC_BLOCK ';'  . 


State 99:
53: exp_assign_op -> exp_assign_op ASSIGN_OP  . exp_eq_ne 
  0:   On exp_eq_ne to state 121
  1:   On exp_le_lt_ge_gt to state 82
  2:   On exp_add_sub to state 83
  3:   On exp_mul_div to state 84
  4:   On singleton to state 85
  5:   On function_call_statement to state 86
  6:   On '(' to state 87
  7:   On modified_variable to state 88
  8:   On '-' to state 89
  9:   On NAME to state 74
  10:   On variable to state 90
  11:   On constant to state 91
  12:   On INTEGER_NUMBER to state 92
  13:   On FLOATING_POINT_NUMBER to state 93


State 100:
55: exp_eq_ne -> exp_eq_ne EQUAL  . exp_le_lt_ge_gt 
  0:   On exp_le_lt_ge_gt to state 122
  1:   On exp_add_sub to state 83
  2:   On exp_mul_div to state 84
  3:   On singleton to state 85
  4:   On function_call_statement to state 86
  5:   On '(' to state 87
  6:   On modified_variable to state 88
  7:   On '-' to state 89
  8:   On NAME to state 74
  9:   On variable to state 90
  10:   On constant to state 91
  11:   On INTEGER_NUMBER to state 92
  12:   On FLOATING_POINT_NUMBER to state 93


State 101:
56: exp_eq_ne -> exp_eq_ne NOT_EQUAL  . exp_le_lt_ge_gt 
  0:   On exp_le_lt_ge_gt to state 123
  1:   On exp_add_sub to state 83
  2:   On exp_mul_div to state 84
  3:   On singleton to state 85
  4:   On function_call_statement to state 86
  5:   On '(' to state 87
  6:   On modified_variable to state 88
  7:   On '-' to state 89
  8:   On NAME to state 74
  9:   On variable to state 90
  10:   On constant to state 91
  11:   On INTEGER_NUMBER to state 92
  12:   On FLOATING_POINT_NUMBER to state 93


State 102:
58: exp_le_lt_ge_gt -> exp_le_lt_ge_gt GE  . exp_add_sub 
  0:   On exp_add_sub to state 124
  1:   On exp_mul_div to state 84
  2:   On singleton to state 85
  3:   On function_call_statement to state 86
  4:   On '(' to state 87
  5:   On modified_variable to state 88
  6:   On '-' to state 89
  7:   On NAME to state 74
  8:   On variable to state 90
  9:   On constant to state 91
  10:   On INTEGER_NUMBER to state 92
  11:   On FLOATING_POINT_NUMBER to state 93


State 103:
59: exp_le_lt_ge_gt -> exp_le_lt_ge_gt GT  . exp_add_sub 
  0:   On exp_add_sub to state 125
  1:   On exp_mul_div to state 84
  2:   On singleton to state 85
  3:   On function_call_statement to state 86
  4:   On '(' to state 87
  5:   On modified_variable to state 88
  6:   On '-' to state 89
  7:   On NAME to state 74
  8:   On variable to state 90
  9:   On constant to state 91
  10:   On INTEGER_NUMBER to state 92
  11:   On FLOATING_POINT_NUMBER to state 93


State 104:
60: exp_le_lt_ge_gt -> exp_le_lt_ge_gt LE  . exp_add_sub 
  0:   On exp_add_sub to state 126
  1:   On exp_mul_div to state 84
  2:   On singleton to state 85
  3:   On function_call_statement to state 86
  4:   On '(' to state 87
  5:   On modified_variable to state 88
  6:   On '-' to state 89
  7:   On NAME to state 74
  8:   On variable to state 90
  9:   On constant to state 91
  10:   On INTEGER_NUMBER to state 92
  11:   On FLOATING_POINT_NUMBER to state 93


State 105:
61: exp_le_lt_ge_gt -> exp_le_lt_ge_gt LT  . exp_add_sub 
  0:   On exp_add_sub to state 127
  1:   On exp_mul_div to state 84
  2:   On singleton to state 85
  3:   On function_call_statement to state 86
  4:   On '(' to state 87
  5:   On modified_variable to state 88
  6:   On '-' to state 89
  7:   On NAME to state 74
  8:   On variable to state 90
  9:   On constant to state 91
  10:   On INTEGER_NUMBER to state 92
  11:   On FLOATING_POINT_NUMBER to state 93


State 106:
63: exp_add_sub -> exp_add_sub '+'  . exp_mul_div 
  0:   On exp_mul_div to state 128
  1:   On singleton to state 85
  2:   On function_call_statement to state 86
  3:   On '(' to state 87
  4:   On modified_variable to state 88
  5:   On '-' to state 89
  6:   On NAME to state 74
  7:   On variable to state 90
  8:   On constant to state 91
  9:   On INTEGER_NUMBER to state 92
  10:   On FLOATING_POINT_NUMBER to state 93


State 107:
64: exp_add_sub -> exp_add_sub '-'  . exp_mul_div 
  0:   On exp_mul_div to state 129
  1:   On singleton to state 85
  2:   On function_call_statement to state 86
  3:   On '(' to state 87
  4:   On modified_variable to state 88
  5:   On '-' to state 89
  6:   On NAME to state 74
  7:   On variable to state 90
  8:   On constant to state 91
  9:   On INTEGER_NUMBER to state 92
  10:   On FLOATING_POINT_NUMBER to state 93


State 108:
66: exp_mul_div -> exp_mul_div '*'  . singleton 
  0:   On singleton to state 130
  1:   On function_call_statement to state 86
  2:   On '(' to state 87
  3:   On modified_variable to state 88
  4:   On '-' to state 89
  5:   On NAME to state 74
  6:   On variable to state 90
  7:   On constant to state 91
  8:   On INTEGER_NUMBER to state 92
  9:   On FLOATING_POINT_NUMBER to state 93


State 109:
67: exp_mul_div -> exp_mul_div '/'  . singleton 
  0:   On singleton to state 131
  1:   On function_call_statement to state 86
  2:   On '(' to state 87
  3:   On modified_variable to state 88
  4:   On '-' to state 89
  5:   On NAME to state 74
  6:   On variable to state 90
  7:   On constant to state 91
  8:   On INTEGER_NUMBER to state 92
  9:   On FLOATING_POINT_NUMBER to state 93


State 110:
70: singleton -> '(' type  . ')' function_call_statement 
75: singleton -> '(' type  . ')' '(' exp_assign_op ')' 
46: variable -> '(' type  . ')' NAME 
  0:   On ')' to state 132


State 111:
73: singleton -> '(' exp_assign_op  . ')' 
53: exp_assign_op -> exp_assign_op  . ASSIGN_OP exp_eq_ne 
  0:   On ')' to state 133
  1:   On ASSIGN_OP to state 99


State 112:
72: singleton -> '-' modified_variable  . 
  Reduce by 72: singleton -> '-' modified_variable  . 


State 113:
74: singleton -> '-' '('  . exp_assign_op ')' 
46: variable -> '('  . type ')' NAME 
  0:   On exp_assign_op to state 134
  1:   On type to state 96
  2:   On exp_eq_ne to state 81
  3:   On INTEGER to state 8
  4:   On FLOAT to state 9
  5:   On DOUBLE to state 10
  6:   On exp_le_lt_ge_gt to state 82
  7:   On exp_add_sub to state 83
  8:   On exp_mul_div to state 84
  9:   On singleton to state 85
  10:   On function_call_statement to state 86
  11:   On '(' to state 87
  12:   On modified_variable to state 88
  13:   On '-' to state 89
  14:   On NAME to state 74
  15:   On variable to state 90
  16:   On constant to state 91
  17:   On INTEGER_NUMBER to state 92
  18:   On FLOATING_POINT_NUMBER to state 93


State 114:
45: variable -> NAME  . 
  Reduce by 45: variable -> NAME  . 


State 115:
40: assignment_statement -> variable ASSIGN_OP exp_assign_op  . ';' 
53: exp_assign_op -> exp_assign_op  . ASSIGN_OP exp_eq_ne 
  0:   On ';' to state 135
  1:   On ASSIGN_OP to state 99


State 116:
41: function_call_statement -> NAME '(' exp_assign_op_list  . ')' 
43: exp_assign_op_list -> exp_assign_op_list  . ',' exp_assign_op 
  0:   On ')' to state 136
  1:   On ',' to state 137


State 117:
42: function_call_statement -> NAME '(' ')'  . 
  Reduce by 42: function_call_statement -> NAME '(' ')'  . 


State 118:
44: exp_assign_op_list -> exp_assign_op  . 
53: exp_assign_op -> exp_assign_op  . ASSIGN_OP exp_eq_ne 
  0:   On ASSIGN_OP to state 99
  Reduce by 44: exp_assign_op_list -> exp_assign_op  . 


State 119:
46: variable -> '(' type ')'  . NAME 
  0:   On NAME to state 138


State 120:
49: conditional_statement -> IF '(' exp_assign_op ')'  . GOTO BASIC_BLOCK ';' ELSE GOTO BASIC_BLOCK ';' 
  0:   On GOTO to state 139


State 121:
53: exp_assign_op -> exp_assign_op ASSIGN_OP exp_eq_ne  . 
55: exp_eq_ne -> exp_eq_ne  . EQUAL exp_le_lt_ge_gt 
56: exp_eq_ne -> exp_eq_ne  . NOT_EQUAL exp_le_lt_ge_gt 
  0:   On EQUAL to state 100
  1:   On NOT_EQUAL to state 101
  Reduce by 53: exp_assign_op -> exp_assign_op ASSIGN_OP exp_eq_ne  . 


State 122:
55: exp_eq_ne -> exp_eq_ne EQUAL exp_le_lt_ge_gt  . 
58: exp_le_lt_ge_gt -> exp_le_lt_ge_gt  . GE exp_add_sub 
59: exp_le_lt_ge_gt -> exp_le_lt_ge_gt  . GT exp_add_sub 
60: exp_le_lt_ge_gt -> exp_le_lt_ge_gt  . LE exp_add_sub 
61: exp_le_lt_ge_gt -> exp_le_lt_ge_gt  . LT exp_add_sub 
  0:   On GE to state 102
  1:   On GT to state 103
  2:   On LE to state 104
  3:   On LT to state 105
  Reduce by 55: exp_eq_ne -> exp_eq_ne EQUAL exp_le_lt_ge_gt  . 


State 123:
56: exp_eq_ne -> exp_eq_ne NOT_EQUAL exp_le_lt_ge_gt  . 
58: exp_le_lt_ge_gt -> exp_le_lt_ge_gt  . GE exp_add_sub 
59: exp_le_lt_ge_gt -> exp_le_lt_ge_gt  . GT exp_add_sub 
60: exp_le_lt_ge_gt -> exp_le_lt_ge_gt  . LE exp_add_sub 
61: exp_le_lt_ge_gt -> exp_le_lt_ge_gt  . LT exp_add_sub 
  0:   On GE to state 102
  1:   On GT to state 103
  2:   On LE to state 104
  3:   On LT to state 105
  Reduce by 56: exp_eq_ne -> exp_eq_ne NOT_EQUAL exp_le_lt_ge_gt  . 


State 124:
58: exp_le_lt_ge_gt -> exp_le_lt_ge_gt GE exp_add_sub  . 
63: exp_add_sub -> exp_add_sub  . '+' exp_mul_div 
64: exp_add_sub -> exp_add_sub  . '-' exp_mul_div 
  0:   On '+' to state 106
  1:   On '-' to state 107
  Reduce by 58: exp_le_lt_ge_gt -> exp_le_lt_ge_gt GE exp_add_sub  . 


State 125:
59: exp_le_lt_ge_gt -> exp_le_lt_ge_gt GT exp_add_sub  . 
63: exp_add_sub -> exp_add_sub  . '+' exp_mul_div 
64: exp_add_sub -> exp_add_sub  . '-' exp_mul_div 
  0:   On '+' to state 106
  1:   On '-' to state 107
  Reduce by 59: exp_le_lt_ge_gt -> exp_le_lt_ge_gt GT exp_add_sub  . 


State 126:
60: exp_le_lt_ge_gt -> exp_le_lt_ge_gt LE exp_add_sub  . 
63: exp_add_sub -> exp_add_sub  . '+' exp_mul_div 
64: exp_add_sub -> exp_add_sub  . '-' exp_mul_div 
  0:   On '+' to state 106
  1:   On '-' to state 107
  Reduce by 60: exp_le_lt_ge_gt -> exp_le_lt_ge_gt LE exp_add_sub  . 


State 127:
61: exp_le_lt_ge_gt -> exp_le_lt_ge_gt LT exp_add_sub  . 
63: exp_add_sub -> exp_add_sub  . '+' exp_mul_div 
64: exp_add_sub -> exp_add_sub  . '-' exp_mul_div 
  0:   On '+' to state 106
  1:   On '-' to state 107
  Reduce by 61: exp_le_lt_ge_gt -> exp_le_lt_ge_gt LT exp_add_sub  . 


State 128:
63: exp_add_sub -> exp_add_sub '+' exp_mul_div  . 
66: exp_mul_div -> exp_mul_div  . '*' singleton 
67: exp_mul_div -> exp_mul_div  . '/' singleton 
  0:   On '*' to state 108
  1:   On '/' to state 109
  Reduce by 63: exp_add_sub -> exp_add_sub '+' exp_mul_div  . 


State 129:
64: exp_add_sub -> exp_add_sub '-' exp_mul_div  . 
66: exp_mul_div -> exp_mul_div  . '*' singleton 
67: exp_mul_div -> exp_mul_div  . '/' singleton 
  0:   On '*' to state 108
  1:   On '/' to state 109
  Reduce by 64: exp_add_sub -> exp_add_sub '-' exp_mul_div  . 


State 130:
66: exp_mul_div -> exp_mul_div '*' singleton  . 
  Reduce by 66: exp_mul_div -> exp_mul_div '*' singleton  . 


State 131:
67: exp_mul_div -> exp_mul_div '/' singleton  . 
  Reduce by 67: exp_mul_div -> exp_mul_div '/' singleton  . 


State 132:
70: singleton -> '(' type ')'  . function_call_statement 
75: singleton -> '(' type ')'  . '(' exp_assign_op ')' 
46: variable -> '(' type ')'  . NAME 
  0:   On function_call_statement to state 140
  1:   On '(' to state 141
  2:   On NAME to state 142


State 133:
73: singleton -> '(' exp_assign_op ')'  . 
  Reduce by 73: singleton -> '(' exp_assign_op ')'  . 


State 134:
74: singleton -> '-' '(' exp_assign_op  . ')' 
53: exp_assign_op -> exp_assign_op  . ASSIGN_OP exp_eq_ne 
  0:   On ')' to state 143
  1:   On ASSIGN_OP to state 99


State 135:
40: assignment_statement -> variable ASSIGN_OP exp_assign_op ';'  . 
  Reduce by 40: assignment_statement -> variable ASSIGN_OP exp_assign_op ';'  . 


State 136:
41: function_call_statement -> NAME '(' exp_assign_op_list ')'  . 
  Reduce by 41: function_call_statement -> NAME '(' exp_assign_op_list ')'  . 


State 137:
43: exp_assign_op_list -> exp_assign_op_list ','  . exp_assign_op 
  0:   On exp_assign_op to state 144
  1:   On exp_eq_ne to state 81
  2:   On exp_le_lt_ge_gt to state 82
  3:   On exp_add_sub to state 83
  4:   On exp_mul_div to state 84
  5:   On singleton to state 85
  6:   On function_call_statement to state 86
  7:   On '(' to state 87
  8:   On modified_variable to state 88
  9:   On '-' to state 89
  10:   On NAME to state 74
  11:   On variable to state 90
  12:   On constant to state 91
  13:   On INTEGER_NUMBER to state 92
  14:   On FLOATING_POINT_NUMBER to state 93


State 138:
46: variable -> '(' type ')' NAME  . 
  Reduce by 46: variable -> '(' type ')' NAME  . 


State 139:
49: conditional_statement -> IF '(' exp_assign_op ')' GOTO  . BASIC_BLOCK ';' ELSE GOTO BASIC_BLOCK ';' 
  0:   On BASIC_BLOCK to state 145


State 140:
70: singleton -> '(' type ')' function_call_statement  . 
  Reduce by 70: singleton -> '(' type ')' function_call_statement  . 


State 141:
75: singleton -> '(' type ')' '('  . exp_assign_op ')' 
  0:   On exp_assign_op to state 146
  1:   On exp_eq_ne to state 81
  2:   On exp_le_lt_ge_gt to state 82
  3:   On exp_add_sub to state 83
  4:   On exp_mul_div to state 84
  5:   On singleton to state 85
  6:   On function_call_statement to state 86
  7:   On '(' to state 87
  8:   On modified_variable to state 88
  9:   On '-' to state 89
  10:   On NAME to state 74
  11:   On variable to state 90
  12:   On constant to state 91
  13:   On INTEGER_NUMBER to state 92
  14:   On FLOATING_POINT_NUMBER to state 93


State 142:
46: variable -> '(' type ')' NAME  . 
41: function_call_statement -> NAME  . '(' exp_assign_op_list ')' 
42: function_call_statement -> NAME  . '(' ')' 
  0:   On '(' to state 95
  Reduce by 46: variable -> '(' type ')' NAME  . 


State 143:
74: singleton -> '-' '(' exp_assign_op ')'  . 
  Reduce by 74: singleton -> '-' '(' exp_assign_op ')'  . 


State 144:
43: exp_assign_op_list -> exp_assign_op_list ',' exp_assign_op  . 
53: exp_assign_op -> exp_assign_op  . ASSIGN_OP exp_eq_ne 
  0:   On ASSIGN_OP to state 99
  Reduce by 43: exp_assign_op_list -> exp_assign_op_list ',' exp_assign_op  . 


State 145:
49: conditional_statement -> IF '(' exp_assign_op ')' GOTO BASIC_BLOCK  . ';' ELSE GOTO BASIC_BLOCK ';' 
  0:   On ';' to state 147


State 146:
75: singleton -> '(' type ')' '(' exp_assign_op  . ')' 
53: exp_assign_op -> exp_assign_op  . ASSIGN_OP exp_eq_ne 
  0:   On ')' to state 148
  1:   On ASSIGN_OP to state 99


State 147:
49: conditional_statement -> IF '(' exp_assign_op ')' GOTO BASIC_BLOCK ';'  . ELSE GOTO BASIC_BLOCK ';' 
  0:   On ELSE to state 149


State 148:
75: singleton -> '(' type ')' '(' exp_assign_op ')'  . 
  Reduce by 75: singleton -> '(' type ')' '(' exp_assign_op ')'  . 


State 149:
49: conditional_statement -> IF '(' exp_assign_op ')' GOTO BASIC_BLOCK ';' ELSE  . GOTO BASIC_BLOCK ';' 
  0:   On GOTO to state 150


State 150:
49: conditional_statement -> IF '(' exp_assign_op ')' GOTO BASIC_BLOCK ';' ELSE GOTO  . BASIC_BLOCK ';' 
  0:   On BASIC_BLOCK to state 151


State 151:
49: conditional_statement -> IF '(' exp_assign_op ')' GOTO BASIC_BLOCK ';' ELSE GOTO BASIC_BLOCK  . ';' 
  0:   On ';' to state 152


State 152:
49: conditional_statement -> IF '(' exp_assign_op ')' GOTO BASIC_BLOCK ';' ELSE GOTO BASIC_BLOCK ';'  . 
  Reduce by 49: conditional_statement -> IF '(' exp_assign_op ')' GOTO BASIC_BLOCK ';' ELSE GOTO BASIC_BLOCK ';'  . 



